plugins {
    id 'dev.architectury.loom' // Must be before architectury-plugin
    id 'architectury-plugin'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id 'java'
}

// <editor-fold desc="# Common Build Logic">
def MINECRAFT_JAVA_VERSION = JavaLanguageVersion.of(rootProject.properties.minecraft_java_version as int)
def MOD_JAVA_VERSION = JavaLanguageVersion.of(rootProject.properties.mod_java_version as int)

sourceCompatibility = JavaVersion.toVersion(MOD_JAVA_VERSION.asInt())
targetCompatibility = JavaVersion.toVersion(MOD_JAVA_VERSION.asInt())

buildDir = rootProject.projectDir.absolutePath + "/build/$project.name"
archivesBaseName = rootProject.archives_base_name
version = rootProject.mod_version
group = rootProject.maven_group

// MIT License, Copyright 2021 shedaniel (https://github.com/shedaniel)
// https://github.com/shedaniel/cloth-config-lite/blob/615f6ed8ebebb8cb973d4901565558ddc486e44c/build.gradle#L52-L57
// Saves a few kilobytes, json can always be pretty printed after the fact.
processResources {
    doLast {
        //noinspection SpellCheckingInspection
        def slurper = Class.forName('groovy.json.JsonSlurper').getDeclaredConstructor().newInstance()
        def toJson = Class.forName('groovy.json.JsonOutput').getDeclaredMethod('toJson', Map.class)
        //noinspection GrUnresolvedAccess
        fileTree(dir: outputs.files.asPath, include: '**/*.json').each {
            File file ->
                {
                    file.text = toJson.invoke(null, slurper.parse(file))
                }
        }
    }
}

repositories {
    mavenLocal()
}

dependencies {
    annotationProcessor('com.github.bsideup.jabel:jabel-javac-plugin:0.4.0')
    compileOnly('com.github.bsideup.jabel:jabel-javac-plugin:0.4.0')
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    if (System.getenv('I_HATE_INTELLIJ_AND_GRADLE')) {
        options.release.set(MINECRAFT_JAVA_VERSION.asInt())
    }
}

tasks.withType(JavaExec).configureEach {
    javaLauncher.set(javaToolchains.launcherFor {
        it.languageVersion = JavaLanguageVersion.of(MINECRAFT_JAVA_VERSION.asInt())
    })
}

// </editor-fold>

sourceSets {
    main {
        java {
            srcDirs([
                    "src/barrel/java",
                    "src/base/java",
                    "src/chest/java",
                    "src/old_chest/java"])
        }
        resources {
            srcDirs([
                    "src/barrel/resources",
                    "src/base/resources",
                    "src/chest/resources",
                    "src/old_chest/resources",
                    "src/common/resources"
            ])
        }
    }
}

architectury {
    fabric()
    injectInjectables = false
}

loom {
    silentMojangMappingsLicense()
    useFabricMixin = true
    accessWidener = file('src/base/resources/expandedstorage_base.accessWidener')

    runs {
        client {
            vmArgs.add('-XX:+IgnoreUnrecognizedVMOptions')
        }

        server {
            vmArgs.add('-XX:+IgnoreUnrecognizedVMOptions')
        }
    }
}

configurations {
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
}

repositories {
    maven {
        name 'Shedaniel'
        url 'https://maven.shedaniel.me/'
    }
    maven {
        name 'TerraformersMC'
        url 'https://maven.terraformersmc.com/'
    }
    maven {
        name 'JitPack'
        url 'https://jitpack.io/'
        content {
            includeGroup 'com.github.Virtuoel'
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
    mappings loom.officialMojangMappings()

    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"

    // For chest module
    modCompileOnly('com.github.Virtuoel:Statement:31a2c3f') {
        exclude group: 'net.fabricmc'
    }
    modCompileOnly('com.github.Virtuoel:Towelette:e5e39eb') {
        exclude group: 'net.fabricmc'
    }

    // For all modules
    modCompileOnly("me.shedaniel:RoughlyEnoughItems:${project.rei_version}") {
        exclude group: 'net.fabricmc'
    }
    modRuntime("me.shedaniel:RoughlyEnoughItems:${project.rei_version}")

    modCompileOnly("com.terraformersmc:modmenu:${project.modmenu_version}") {
        exclude group: 'net.fabricmc'
    }
    modRuntime("com.terraformersmc:modmenu:${project.modmenu_version}")

    implementation(project(path: ':common')) {
        transitive = false
    }
    developmentFabric(project(path: ':common')) {
        transitive = false
    }
    shadowCommon(project(path: ':common', configuration: 'transformProductionFabric')) {
        transitive = false
    }
}

processResources {
    def props = ['version': project.version]
    inputs.properties props

    filesMatching('fabric.mod.json') {
        expand props
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    classifier 'dev-shadow-' + minecraft_version
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveVersion = mod_version + '+' + minecraft_version // Feels hacky but works.
}

jar {
    classifier 'dev-' + minecraft_version
}

//sourcesJar {
//    def commonSources = project(':common').sourcesJar
//    dependsOn commonSources
//    from commonSources.archiveFile.map { zipTree(it) } duplicatesStrategy(DuplicatesStrategy.WARN)
//}
