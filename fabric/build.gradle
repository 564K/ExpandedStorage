plugins {
    id 'dev.architectury.loom' // Must be before architectury-plugin
    id 'architectury-plugin'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
}

architectury {
    fabric()
    injectInjectables = false
}

loom {
    silentMojangMappingsLicense()
    useFabricMixin = true
}

configurations {
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
}

dependencies {
    minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
    mappings loom.officialMojangMappings()

    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"

    implementation(project(path: ':common')) {
        transitive = false
    }
    developmentFabric(project(path: ':common')) {
        transitive = false
    }
    shadowCommon(project(path: ':common', configuration: 'transformProductionFabric')) {
        transitive = false
    }
}

processResources {
    def props = ['version': project.version]
    inputs.properties props

    filesMatching('fabric.mod.json') {
        expand props
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    classifier 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier 'fabric'
}

jar {
    classifier 'dev'
}

sourcesJar {
    def commonSources = project(':common').sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}
