plugins {
    id 'dev.architectury.loom' // Must be before architectury-plugin
    id 'architectury-plugin'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
}

architectury {
    fabric()
    injectInjectables = false
}

loom {
    silentMojangMappingsLicense()
    useFabricMixin = true
}

configurations {
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
}

repositories {
    maven {
        name 'Shedaniel'
        url 'https://maven.shedaniel.me/'
    }
    maven {
        name 'TerraformersMC'
        url 'https://maven.terraformersmc.com/'
    }
    maven {
        name 'JitPack'
        url 'https://jitpack.io/'
        content {
            includeGroup 'com.github.Virtuoel'
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
    mappings loom.officialMojangMappings()

    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"

    // For chest module
    modCompileOnly('com.github.Virtuoel:Statement:31a2c3f') {
        exclude group: 'net.fabricmc'
    }
    modCompileOnly('com.github.Virtuoel:Towelette:e5e39eb') {
        exclude group: 'net.fabricmc'
    }

    // For all modules
    modCompileOnly('me.shedaniel:RoughlyEnoughItems:5.10.181') {
        exclude group: 'net.fabricmc'
    }
    modRuntime('me.shedaniel:RoughlyEnoughItems:5.10.181')

    modCompileOnly('com.terraformersmc:modmenu:1.16.9') {
        exclude group: 'net.fabricmc'
    }
    modRuntime('com.terraformersmc:modmenu:1.16.9')

    implementation(project(path: ':common')) {
        transitive = false
    }
    developmentFabric(project(path: ':common')) {
        transitive = false
    }
    shadowCommon(project(path: ':common', configuration: 'transformProductionFabric')) {
        transitive = false
    }
}

processResources {
    def props = ['version': project.version]
    inputs.properties props

    filesMatching('fabric.mod.json') {
        expand props
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    classifier 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier 'fabric'
}

jar {
    classifier 'dev'
}

sourcesJar {
    def commonSources = project(':common').sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) } duplicatesStrategy(DuplicatesStrategy.WARN)
}
