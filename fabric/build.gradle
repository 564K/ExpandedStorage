tasks.withType(JavaExec).configureEach {
    javaLauncher.set(javaToolchains.launcherFor {
        it.languageVersion = JavaLanguageVersion.of(rootProject.minecraft_java_version)
    })
}

loom {
    accessWidener = file('src/base/resources/expandedstorage_base.accessWidener')

    runs {
        client {
            vmArgs('-XX:+IgnoreUnrecognizedVMOptions')
        }

        server {
            vmArgs('-XX:+IgnoreUnrecognizedVMOptions')
        }
    }
}

repositories {
    maven {
        name 'Shedaniel'
        url 'https://maven.shedaniel.me/'
    }
    maven {
        name 'TerraformersMC'
        url 'https://maven.terraformersmc.com/'
    }
    maven {
        name 'JitPack'
        url 'https://jitpack.io/'
        content {
            includeGroup 'com.github.Virtuoel'
        }
    }
}

// todo: how to fix intellij "errors"
def excludeFabric = {
    exclude group: 'net.fabricmc'
}

dependencies {
    modImplementation("net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}")
    modApi("net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}")

    // For chest module
    modCompileOnly('com.github.Virtuoel:Statement:31a2c3f', excludeFabric)
    modCompileOnly('com.github.Virtuoel:Towelette:e5e39eb', excludeFabric)

    // For base module
    modCompileOnly("me.shedaniel:RoughlyEnoughItems:${project.rei_version}", excludeFabric)
    modRuntime("me.shedaniel:RoughlyEnoughItems:${project.rei_version}")

    modCompileOnly("com.terraformersmc:modmenu:${project.modmenu_version}", excludeFabric)
    modRuntime("com.terraformersmc:modmenu:${project.modmenu_version}")
}

processResources {
    def props = ['version': project.version]
    inputs.properties props

    filesMatching('fabric.mod.json') {
        expand props
    }
}
