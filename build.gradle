plugins {
    id 'dev.architectury.loom' version '0.7.2-SNAPSHOT' apply false // Architectury plugin requires loom on class path
    id 'architectury-plugin' version '3.1-SNAPSHOT'
}

def MINECRAFT_JAVA_VERSION = JavaLanguageVersion.of(rootProject.properties.minecraft_java_version as int)
def MOD_JAVA_VERSION = JavaLanguageVersion.of(rootProject.properties.mod_java_version as int)

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: 'java'

    project.buildDir = rootProject.projectDir.absolutePath + "/build/$project.name"

    afterEvaluate {
        // MIT License, Copyright 2021 shedaniel (https://github.com/shedaniel)
        // https://github.com/shedaniel/cloth-config-lite/blob/615f6ed8ebebb8cb973d4901565558ddc486e44c/build.gradle#L52-L57
        // Saves a few kilobytes, json can always be pretty printed after the fact.
        processResources {
            doLast {
                //noinspection SpellCheckingInspection
                def slurper = Class.forName('groovy.json.JsonSlurper').getDeclaredConstructor().newInstance()
                def toJson = Class.forName('groovy.json.JsonOutput').getDeclaredMethod('toJson', Map.class)
                //noinspection GrUnresolvedAccess
                fileTree(dir: outputs.files.asPath, include: '**/*.json').each {
                    File file ->
                        {
                            file.text = toJson.invoke(null, slurper.parse(file))
                        }
                }
            }
        }
    }

    archivesBaseName = rootProject.archives_base_name
    version = rootProject.mod_version
    group = rootProject.maven_group

    dependencies {
        annotationProcessor('com.github.bsideup.jabel:jabel-javac-plugin:0.3.0') {
            exclude group: 'net.bytebuddy'
        }
        annotationProcessor('net.bytebuddy:byte-buddy:1.10.22')
        annotationProcessor('net.bytebuddy:byte-buddy-agent:1.10.22')
    }

    java {
        withSourcesJar()
        toolchain {
            languageVersion = MOD_JAVA_VERSION
        }
    }

    // We specified a java version, use it when compiling our mod
    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
        options.setFork(true)
        options.forkOptions.jvmArgs += List.of('--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED', '--add-opens=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED')
        javaCompiler.set(javaToolchains.compilerFor {
            languageVersion = MOD_JAVA_VERSION
        })
        if (JavaVersion.toVersion(MOD_JAVA_VERSION.asInt()).isJava9Compatible()) {
            it.options.release.set(rootProject.properties.minecraft_java_version as int)
        }
    }

    tasks.withType(JavaExec).configureEach {
        javaLauncher.set(javaToolchains.launcherFor {
            languageVersion = MINECRAFT_JAVA_VERSION
        })
    }
}
